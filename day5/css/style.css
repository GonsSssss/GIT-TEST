.innerWrap {
  width: 1240px;
  margin: 0 auto;
  padding: 80px 20px 0;
}

/* letter-spacing 글자간 간격 조절 */
main h2 {
  letter-spacing: 0.25em;
  text-align: center;
  font-size: 50px;
  margin-bottom: 80px;
}

header {
  background: url(../images/KakaoTalk_20240311_171945083.jpg) no-repeat right
    center/cover;
  height: 720px;
}
header h1 {
  padding-top: 120px;
}

/* 요소의 위치를 지정할 때(좌우, 상하 아니고 절대) 
position을 통해 요소를 배치할 수 있습니다.
요소으 ㅣ위치의 기준이 될 부모요소에 position: relative; 라고
작성합니다.
다음 움직이고자 하는 자식 요소에 position:abolute; 라고 작성하고 구체적인 위치를 지정*/

header .innerWrap {
  height: 720px;
  position: relative;
}

/* position으로 abolute옵션을 주면 p요소, 즉 class-scroll 이 친구가 화면을 가득 채우는 성질을 잃는다. 
화면을 가득채우는 성질을 잃었을 때 강제로 화면을 가득 채우는 성질을 회복하도록 width:100%; 를 사용*/
header .scroll {
  position: absolute;
  left: 0;
  bottom: 0;
  text-align: center;
  font-size: 16px;
  width: 100%;
}

header .scroll img {
  margin-top: 8px;
}

/* position으로 fixed옵션을 주면 이 친구가 화면을 가득 채우는 성질을 잃습니다.
width: %; 를 사용해서 가로폭을 채우고 성질을 회복한다. */
header nav {
  position: fixed;
  width: 100%;
  top: 0;
  left: 0;
  z-index: 100;
}

header nav ul {
  display: flex;
  width: 1240px;
  margin: 0 auto;
  justify-content: space-around;
  padding: 10px 20px;
}

/* a:hover 같이 :hover 같은걸 "가상선택자" 라고 합니다. */
header nav ul li a:hover {
  text-decoration: underline 2px;
}
/* position으로 구도를 잡으면 부모 자식 요소들 끼리 원치않는 형태로 겹칠때가 있습니다. */
/* 해당 부모 자식간 위치선정을 할 수 있는데 이때 z-index를 사용한다.
z-index에 높은 값을 줄수록 앞으로 나온다. */

.msgSec {
  background-color: #fbfaf7;
}

.msgSec p {
  text-align: center;
  line-height: 1.7;
  margin-bottom: 40px;
}

/* 마진 상쇄에 주의하자
인접한 요소에 상하방향으로 margin을 지정할 때
40px + 80px = 120px 는 일어나지 않는다.
마진상쇄가 발생할 시 더 큰값의 마진만 적용된다. */

/* 청접장 그림 양 옆에 잎사귀 그림을 붙이려면 
부모요소가 되는 그림에 position:relative; 를 붙이자 */
.msgSec p.illust {
  margin-top: 80px;
  margin-bottom: 0;
  position: relative;
}
/* CSS 우선순위 정리
1. 밑으로 온 파일이 우선순위를 갖는다.
2. 구체적 태그가 우선순위를 갖는다.
타입선택자 --> 클래스 속성 --> id속성 --> 태그에 직접 작성된 스타일
<p style="color red;"> </p> */

/* ::before는 그 요소 앞을 뜻하는 가상요소이다. ::after 는 요소의 뒤*/
.msgSec p.illust::before {
  content: url(../images/deco_left.png);
  position: absolute;
  left: 320px;
  bottom: -30px;
}

.msgSec p.illust::after {
  content: url(../images/deco_right.png);
  position: absolute;
  right: 320px;
  bottom: -30px;
}

.dateSec {
  background-color: white;
  padding-bottom: 120px;
}

.dateSec .layoutWrap {
  display: flex;
}

/* flex 하고 나면 flex 안에 구성요소 너비를 지정해주자 */

.dateSec .layoutWrap > p {
  flex-basis: 735px;
}

.dateSec .layoutWrap > div {
  flex-basis: 465px;
  padding-top: 100px;
}

.dateSec .dateDetailSec {
  font-size: 72px;
  margin: 0 0 170px -100px;
  background-color: rgb(250, 244, 237);
  padding: 40px 64px;
  line-height: 1.2;
}

.word1 {
  font-size: 50px;
}

.word2 {
  font-size: 40px;
}

.word3 {
  font-size: 60px;
}

.accessSec {
  margin-left: 48px;
}

.accessSec h3 {
  color: rgb(133, 143, 124);
  font-size: 55px;
  letter-spacing: 0.05em;
  margin-bottom: 8px;
}

.accessSec p {
  line-height: 1.4;
}

.formSec {
  background-color: rgb(238, 228, 199);
}
form {
  width: 600px;
  margin: 0 auto;
}

/* 이런식의 선택자를 속성 선택자라고 한다.
input[type] <ㅡ input 안에 type항목들 전부 선택
[type="text"] input 태그 아니어도 해당 조건의 태그 전부 선택 */
input[type="text"],
input[type="email"],
select,
textarea {
  border: 1px SOLID #cccccc;
  background-color: white;
  width: 100%;
  margin-top: 5px;
  padding: 4px 5px;
}
input[type="radio"],
input[type="checkbox"] {
  width: 20px;
  height: 20px;
  vertical-align: baseline;
  margin-right: 3px;
}

.attendRadio {
  text-align: center;
  margin-bottom: 30px;
}

.attendRadio label {
  margin: 0 20px;
  font-size: 24px;
}

.allergyCheck label {
  margin-bottom: 20px;
}

select {
  background: #ffffff url(../images/arrow.png) no-repeat 99.5%;
}

textarea {
  height: 148px;
  margin-bottom: 30px;
}

form > p {
  line-height: 1.4;
  margin-bottom: 20px;
}

.submitButton {
  text-align: center;
}

input[type="submit"] {
  background-color: #000000;
  color: #ffffff;
  padding: 18px 80px;
}

footer {
  background-color: #c7888c;
  color: #ffffff;
  padding: 14px 10px 20px;
  text-align: center;
}

/* 패럴랙스 효과: 시차를 가지는 효과
   배경 이미지를 고정시키고 앞면 콘텐츠와 스크롤에 차이를 주면
   시각적 시차효과를 가질 수 있습니다. */

.dateSec {
  margin-bottom: 480px;
}

.dateSec::after {
  /* 배경이미지는 background로 지정하니까 컨텐츠를 비웁니다. 

     해당 css를 통한 목표는 화면을 가득 채우고 고정배치하기 위함입니다.*/
  content: "";
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: url(../images/bg.jpg) no-repeat center/cover;
  z-index: -1;
}

input[type="submit"]:hover {
  /*  transition-property로 효과를 적용할 css속성을 선택
      transition-duration 효과의 속도 입니다.
      transition-timing-function ease-in; 천천히 시작후 그 후 가속하여 종료시엔 빠르게*/
  background-color: #c7888c;
  margin-left: 20px;
  transition-property: background-color, margin-left;
  transition-duration: 200ms;
  transition-timing-function: ease-in;
}

/* scrollAnimation 이런 이름은 내가 마음대로 지울 수 있음 */
@keyframes scrollAnimation {
  0% {
    transform: scaleY(0);
    transform-origin: top;
  }
  50% {
    transform: scaleY(1);
    transform-origin: top;
  }
  50.1% {
    transform: scaleY(1);
    transform-origin: bottom;
  }
  100% {
    transform: scaleY(0);
    transform-origin: bottom;
  }
}

header .scroll img {
  animation-name: scrollAnimation;
  animation-duration: 1.8s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}

/* 반응형 웹 기능구현 = 미디어 쿼리 = media query */
/* 반응형 웹 주의사항: 화면 너비를 절대 픽셀로 정해면 나중에 css로 전부 바로잡아야 하므로 
   반응형 웹 사용시 화면의 크기는 비율로 잡아야한다. */
@media screen and (max-width: 640px) {
  .innerWrap,
  header nav ul,
  form {
    width: 100%;
  }

  header h1 img,
  .msgSec .illust img,
  .dateSec .layoutWrap > p img {
    width: 100%;
  }
  .msgSec p.illust::before {
    left: -16px;
    bottom: -80px;
    transform: scale(0.7);
  }
  .msgSec p.illust::after {
    left: -16px;
    bottom: -80px;
    transform: scale(0.7);
  }

  body {
    font-size: 16px;
  }

  main h2 {
    font-size: 44px;
    margin-bottom: 60px;
  }

  header {
    background: url(../images/hero.jpg) no-repeat right top/cover;
  }

  header .innerWrap {
    /* vh는 높이가 이미지의 크기에 맞게 상대지저앻 줍니다.
    100vh는 화면 높이의 100%, 100wh는 화면 너비의 100%*/
    /* %도 상대비율이고 vh도 상대비율이면 뭔차이?
    vh는 화면 사이즈에 따라 비율이 결정되고 %는 부모요소를 기준으로 한 비율 */
    height: 90vh;
  }

  .msgSec p {
    text-align: left;
  }
}
